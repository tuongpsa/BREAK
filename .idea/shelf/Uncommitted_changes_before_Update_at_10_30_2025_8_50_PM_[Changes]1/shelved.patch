Index: src/game/audio/AudioManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game.audio;\r\n\r\nimport javafx.scene.media.Media;\r\nimport javafx.scene.media.MediaPlayer;\r\n\r\nimport javax.sound.sampled.*;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * Class qu·∫£n l√Ω √¢m thanh cho game - Hybrid approach\r\n * S·ª≠ d·ª•ng JavaFX Media cho MP3 v√† Java Sound API cho WAV\r\n */\r\npublic class AudioManager {\r\n    // JavaFX Media cho MP3\r\n    private MediaPlayer menuMusic;\r\n    private MediaPlayer gameMusic;\r\n    \r\n    // Java Sound API cho WAV\r\n    private Clip brickHitClip;\r\n    private Clip paddleHitClip;\r\n    private Clip gameOverClip;\r\n    \r\n    private boolean soundEnabled = true;\r\n    private boolean musicEnabled = true;\r\n    private boolean initialized = false;\r\n    \r\n    public AudioManager() {\r\n        if (initialized) {\r\n            return; // Tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn\r\n        }\r\n        \r\n        try {\r\n            // Load MP3 music v·ªõi JavaFX Media\r\n            loadMP3Music();\r\n            \r\n            // Load WAV sound effects v·ªõi Java Sound API\r\n            loadWAVSounds();\r\n            \r\n            initialized = true;\r\n            System.out.println(\"game.audio.AudioManager initialized with hybrid approach (MP3 + WAV)\");\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Kh√¥ng th·ªÉ load √¢m thanh: \" + e.getMessage());\r\n            createDefaultSounds();\r\n        }\r\n    }\r\n    \r\n    private void loadMP3Music() {\r\n        try {\r\n            // Load menu music MP3\r\n            String menuMusicPath = \"file:///D:/BREAK/assets/menu_music.mp3\";\r\n            Media menuMedia = new Media(menuMusicPath);\r\n            menuMusic = new MediaPlayer(menuMedia);\r\n            menuMusic.setCycleCount(MediaPlayer.INDEFINITE);\r\n            menuMusic.setVolume(0.3);\r\n            \r\n            // Load game music MP3\r\n            String gameMusicPath = \"file:///D:/BREAK/assets/game_music.mp3\";\r\n            Media gameMedia = new Media(gameMusicPath);\r\n            gameMusic = new MediaPlayer(gameMedia);\r\n            gameMusic.setCycleCount(MediaPlayer.INDEFINITE);\r\n            gameMusic.setVolume(0.3);\r\n            \r\n            System.out.println(\"MP3 music loaded successfully\");\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Kh√¥ng th·ªÉ load MP3 music: \" + e.getMessage());\r\n            menuMusic = null;\r\n            gameMusic = null;\r\n        }\r\n    }\r\n    \r\n    private void loadWAVSounds() {\r\n        try {\r\n            // Load WAV sound effects\r\n            loadAudioClip(\"assets/brick_hit.wav\", \"brick\");\r\n            loadAudioClip(\"assets/paddle_hit.wav\", \"paddle\");\r\n            loadAudioClip(\"assets/game_over.wav\", \"gameover\");\r\n            \r\n            System.out.println(\"WAV sound effects loaded successfully\");\r\n            \r\n        } catch (Exception e) {\r\n            System.out.println(\"Kh√¥ng th·ªÉ load WAV sounds: \" + e.getMessage());\r\n        }\r\n    }\r\n    \r\n    private void loadAudioClip(String filePath, String type) {\r\n        try {\r\n            File audioFile = new File(filePath);\r\n            if (!audioFile.exists()) {\r\n                System.out.println(\"File kh√¥ng t·ªìn t·∫°i: \" + filePath);\r\n                return;\r\n            }\r\n            \r\n            AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);\r\n            Clip clip = AudioSystem.getClip();\r\n            clip.open(audioStream);\r\n            \r\n            switch (type) {\r\n                case \"brick\":\r\n                    brickHitClip = clip;\r\n                    break;\r\n                case \"paddle\":\r\n                    paddleHitClip = clip;\r\n                    break;\r\n                case \"gameover\":\r\n                    gameOverClip = clip;\r\n                    break;\r\n            }\r\n            \r\n        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {\r\n            System.out.println(\"L·ªói load file √¢m thanh \" + filePath + \": \" + e.getMessage());\r\n        }\r\n    }\r\n    \r\n    private void createDefaultSounds() {\r\n        System.out.println(\"S·ª≠ d·ª•ng √¢m thanh m·∫∑c ƒë·ªãnh\");\r\n        initialized = true;\r\n    }\r\n    \r\n    public void playMenuMusic() {\r\n        if (musicEnabled && menuMusic != null) {\r\n            stopAllMusic();\r\n            menuMusic.play();\r\n        } else if (musicEnabled) {\r\n            System.out.println(\"Menu music kh√¥ng kh·∫£ d·ª•ng\");\r\n        }\r\n    }\r\n    \r\n    public void playGameMusic() {\r\n        if (musicEnabled && gameMusic != null) {\r\n            stopAllMusic();\r\n            gameMusic.play();\r\n        } else if (musicEnabled) {\r\n            System.out.println(\"game.core.Game music kh√¥ng kh·∫£ d·ª•ng\");\r\n        }\r\n    }\r\n    \r\n    public void stopAllMusic() {\r\n        if (menuMusic != null) {\r\n            menuMusic.stop();\r\n        }\r\n        if (gameMusic != null) {\r\n            gameMusic.stop();\r\n        }\r\n    }\r\n    \r\n    public void stopMenuMusic() {\r\n        if (menuMusic != null) {\r\n            menuMusic.stop();\r\n        }\r\n    }\r\n    \r\n    public void stopGameMusic() {\r\n        if (gameMusic != null) {\r\n            gameMusic.stop();\r\n        }\r\n    }\r\n    \r\n    public void playBrickHit() {\r\n        if (soundEnabled && brickHitClip != null) {\r\n            brickHitClip.setFramePosition(0);\r\n            brickHitClip.start();\r\n        }\r\n    }\r\n    \r\n    public void playPaddleHit() {\r\n        if (soundEnabled && paddleHitClip != null) {\r\n            paddleHitClip.setFramePosition(0);\r\n            paddleHitClip.start();\r\n        }\r\n    }\r\n    \r\n    public void playGameOver() {\r\n        if (soundEnabled && gameOverClip != null) {\r\n            gameOverClip.setFramePosition(0);\r\n            gameOverClip.start();\r\n        }\r\n    }\r\n    \r\n    public void setSoundEnabled(boolean enabled) {\r\n        this.soundEnabled = enabled;\r\n    }\r\n    \r\n    public void setMusicEnabled(boolean enabled) {\r\n        this.musicEnabled = enabled;\r\n        if (!enabled) {\r\n            stopAllMusic();\r\n        }\r\n    }\r\n    \r\n    public boolean isSoundEnabled() {\r\n        return soundEnabled;\r\n    }\r\n    \r\n    public boolean isMusicEnabled() {\r\n        return musicEnabled;\r\n    }\r\n    \r\n    public void dispose() {\r\n        if (menuMusic != null) menuMusic.dispose();\r\n        if (gameMusic != null) gameMusic.dispose();\r\n        if (brickHitClip != null) brickHitClip.close();\r\n        if (paddleHitClip != null) paddleHitClip.close();\r\n        if (gameOverClip != null) gameOverClip.close();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/audio/AudioManager.java b/src/game/audio/AudioManager.java
--- a/src/game/audio/AudioManager.java	(revision e279a344a8846a8da5d8a214d90239bc9ebd28e3)
+++ b/src/game/audio/AudioManager.java	(date 1761798114522)
@@ -15,37 +15,41 @@
     // JavaFX Media cho MP3
     private MediaPlayer menuMusic;
     private MediaPlayer gameMusic;
-    
+
     // Java Sound API cho WAV
     private Clip brickHitClip;
     private Clip paddleHitClip;
     private Clip gameOverClip;
-    
+
     private boolean soundEnabled = true;
     private boolean musicEnabled = true;
     private boolean initialized = false;
-    
+
+    // üîä NEW: Th√™m bi·∫øn volume v√† mute
+    private double currentVolume = 0.5; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh 50%
+    private boolean muted = false;
+
     public AudioManager() {
         if (initialized) {
             return; // Tr√°nh kh·ªüi t·∫°o nhi·ªÅu l·∫ßn
         }
-        
+
         try {
             // Load MP3 music v·ªõi JavaFX Media
             loadMP3Music();
-            
+
             // Load WAV sound effects v·ªõi Java Sound API
             loadWAVSounds();
-            
+
             initialized = true;
             System.out.println("game.audio.AudioManager initialized with hybrid approach (MP3 + WAV)");
-            
+
         } catch (Exception e) {
             System.out.println("Kh√¥ng th·ªÉ load √¢m thanh: " + e.getMessage());
             createDefaultSounds();
         }
     }
-    
+
     private void loadMP3Music() {
         try {
             // Load menu music MP3
@@ -53,38 +57,38 @@
             Media menuMedia = new Media(menuMusicPath);
             menuMusic = new MediaPlayer(menuMedia);
             menuMusic.setCycleCount(MediaPlayer.INDEFINITE);
-            menuMusic.setVolume(0.3);
-            
+            menuMusic.setVolume(currentVolume);
+
             // Load game music MP3
             String gameMusicPath = "file:///D:/BREAK/assets/game_music.mp3";
             Media gameMedia = new Media(gameMusicPath);
             gameMusic = new MediaPlayer(gameMedia);
             gameMusic.setCycleCount(MediaPlayer.INDEFINITE);
-            gameMusic.setVolume(0.3);
-            
+            gameMusic.setVolume(currentVolume);
+
             System.out.println("MP3 music loaded successfully");
-            
+
         } catch (Exception e) {
             System.out.println("Kh√¥ng th·ªÉ load MP3 music: " + e.getMessage());
             menuMusic = null;
             gameMusic = null;
         }
     }
-    
+
     private void loadWAVSounds() {
         try {
             // Load WAV sound effects
             loadAudioClip("assets/brick_hit.wav", "brick");
             loadAudioClip("assets/paddle_hit.wav", "paddle");
             loadAudioClip("assets/game_over.wav", "gameover");
-            
+
             System.out.println("WAV sound effects loaded successfully");
-            
+
         } catch (Exception e) {
             System.out.println("Kh√¥ng th·ªÉ load WAV sounds: " + e.getMessage());
         }
     }
-    
+
     private void loadAudioClip(String filePath, String type) {
         try {
             File audioFile = new File(filePath);
@@ -92,11 +96,11 @@
                 System.out.println("File kh√¥ng t·ªìn t·∫°i: " + filePath);
                 return;
             }
-            
+
             AudioInputStream audioStream = AudioSystem.getAudioInputStream(audioFile);
             Clip clip = AudioSystem.getClip();
             clip.open(audioStream);
-            
+
             switch (type) {
                 case "brick":
                     brickHitClip = clip;
@@ -108,35 +112,37 @@
                     gameOverClip = clip;
                     break;
             }
-            
+
         } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
             System.out.println("L·ªói load file √¢m thanh " + filePath + ": " + e.getMessage());
         }
     }
-    
+
     private void createDefaultSounds() {
         System.out.println("S·ª≠ d·ª•ng √¢m thanh m·∫∑c ƒë·ªãnh");
         initialized = true;
     }
-    
+
     public void playMenuMusic() {
         if (musicEnabled && menuMusic != null) {
             stopAllMusic();
+            applyCurrentSettings(menuMusic);
             menuMusic.play();
         } else if (musicEnabled) {
             System.out.println("Menu music kh√¥ng kh·∫£ d·ª•ng");
         }
     }
-    
+
     public void playGameMusic() {
         if (musicEnabled && gameMusic != null) {
             stopAllMusic();
+            applyCurrentSettings(gameMusic);
             gameMusic.play();
         } else if (musicEnabled) {
             System.out.println("game.core.Game music kh√¥ng kh·∫£ d·ª•ng");
         }
     }
-    
+
     public void stopAllMusic() {
         if (menuMusic != null) {
             menuMusic.stop();
@@ -145,59 +151,87 @@
             gameMusic.stop();
         }
     }
-    
+
     public void stopMenuMusic() {
         if (menuMusic != null) {
             menuMusic.stop();
         }
     }
-    
+
     public void stopGameMusic() {
         if (gameMusic != null) {
             gameMusic.stop();
         }
     }
-    
+
     public void playBrickHit() {
         if (soundEnabled && brickHitClip != null) {
             brickHitClip.setFramePosition(0);
             brickHitClip.start();
         }
     }
-    
+
     public void playPaddleHit() {
         if (soundEnabled && paddleHitClip != null) {
             paddleHitClip.setFramePosition(0);
             paddleHitClip.start();
         }
     }
-    
+
     public void playGameOver() {
         if (soundEnabled && gameOverClip != null) {
             gameOverClip.setFramePosition(0);
             gameOverClip.start();
         }
     }
-    
+
     public void setSoundEnabled(boolean enabled) {
         this.soundEnabled = enabled;
     }
-    
+
     public void setMusicEnabled(boolean enabled) {
         this.musicEnabled = enabled;
         if (!enabled) {
             stopAllMusic();
         }
     }
-    
+
     public boolean isSoundEnabled() {
         return soundEnabled;
     }
-    
+
     public boolean isMusicEnabled() {
         return musicEnabled;
     }
-    
+
+    // üîä NEW: Thay ƒë·ªïi √¢m l∆∞·ª£ng to√†n h·ªá th·ªëng
+    public void setVolume(double volume) {
+        this.currentVolume = volume;
+        if (menuMusic != null) menuMusic.setVolume(volume);
+        if (gameMusic != null) gameMusic.setVolume(volume);
+    }
+
+    public double getVolume() {
+        return currentVolume;
+    }
+
+    // üîä NEW: B·∫≠t/t·∫Øt ti·∫øng
+    public void toggleMute() {
+        muted = !muted;
+        if (menuMusic != null) menuMusic.setMute(muted);
+        if (gameMusic != null) gameMusic.setMute(muted);
+    }
+
+    public boolean isMuted() {
+        return muted;
+    }
+
+    // üîä NEW: C·∫≠p nh·∫≠t l·∫°i √¢m l∆∞·ª£ng v√† mute khi chuy·ªÉn nh·∫°c
+    private void applyCurrentSettings(MediaPlayer player) {
+        player.setVolume(currentVolume);
+        player.setMute(muted);
+    }
+
     public void dispose() {
         if (menuMusic != null) menuMusic.dispose();
         if (gameMusic != null) gameMusic.dispose();
@@ -205,4 +239,4 @@
         if (paddleHitClip != null) paddleHitClip.close();
         if (gameOverClip != null) gameOverClip.close();
     }
-}
\ No newline at end of file
+}
Index: src/game/core/PauseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game.core;\r\n\r\n// java\r\npublic class PauseManager {\r\n    private volatile boolean paused = false;\r\n    private final Object lock = new Object();\r\n    private long pauseStartMillis = 0;\r\n    private long accumulatedPausedMillis = 0;\r\n\r\n    // Enter pause state\r\n    public void pause() {\r\n        if (!paused) {\r\n            paused = true;\r\n            pauseStartMillis = System.currentTimeMillis();\r\n        }\r\n    }\r\n\r\n    // Exit pause state\r\n    public void resume() {\r\n        if (paused) {\r\n            long now = System.currentTimeMillis();\r\n            accumulatedPausedMillis += now - pauseStartMillis;\r\n            paused = false;\r\n            synchronized (lock) {\r\n                lock.notifyAll();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Toggle pause/resume\r\n    public void toggle() {\r\n        if (paused) resume(); else pause();\r\n    }\r\n\r\n    // Query pause state\r\n    public boolean isPaused() {\r\n        return paused;\r\n    }\r\n\r\n    // Blocking helper for game loop: call at start of each frame/update\r\n    // This will pause the calling thread until resume() is called.\r\n    public void waitWhilePaused() {\r\n        synchronized (lock) {\r\n            while (paused) {\r\n                try {\r\n                    lock.wait();\r\n                } catch (InterruptedException e) {\r\n                    Thread.currentThread().interrupt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Total time spent paused (millis). If currently paused, includes current pause interval.\r\n    public long getTotalPausedMillis() {\r\n        if (paused) {\r\n            return accumulatedPausedMillis + (System.currentTimeMillis() - pauseStartMillis);\r\n        } else {\r\n            return accumulatedPausedMillis;\r\n        }\r\n    }\r\n\r\n    // Reset accumulated paused time (does not change current pause state)\r\n    public void resetAccumulatedPausedMillis() {\r\n        accumulatedPausedMillis = 0;\r\n        if (paused) {\r\n            pauseStartMillis = System.currentTimeMillis();\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/core/PauseManager.java b/src/game/core/PauseManager.java
--- a/src/game/core/PauseManager.java	(revision e279a344a8846a8da5d8a214d90239bc9ebd28e3)
+++ b/src/game/core/PauseManager.java	(date 1761794438998)
@@ -69,4 +69,8 @@
         }
     }
 }
+/*giao dieenj goomf resume replay setting exit
+trong setting c√≥ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng b·∫±ng thanh k√©o,chuy·ªÉn c√°ch ch∆°i t·ª´ m≈©i t√™n sang WASD
+ph√≠m space ƒë·ªÉ pause
+        mute v√† unmute*/
 
